@typeparam TUser where TUser : class
@using Microsoft.Extensions.Localization;

@inject IBlazorSignInManager<TUser> SignInManager

<EditForm class="col-5" EditContext="editContext" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">@UsernameLabel</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.UserName" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">@PasswordLabel</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
        <label class="form-check-label" for="exampleCheck1">@RememberMeLabel</label>
    </div>
    <div>
        <button type="submit" class="btn btn-primary">@LoginButton</button>
    </div>
</EditForm>

@code {
    private EditContext? editContext;
    private LoginModel loginModel = new();
    private ValidationMessageStore? messageStore;

    [Parameter]
    public string UsernameLabel { get; set; }

    [Parameter]
    public string PasswordLabel { get; set; }

    [Parameter]
    public string RememberMeLabel { get; set; }

    [Parameter]
    public string LoginButton { get; set; }

    [Parameter]
    public EventCallback OnLogin { get; set; }

    [Parameter]
    public string FailureMessage { get; set; } = "Login failed. Please check the email address and password.";

    protected override void OnInitialized()
    {
        editContext = new(loginModel);
        messageStore = new(editContext);
    }

    private async Task HandleSubmit()
    {
        messageStore?.Clear();

        if (editContext?.Validate() != true)
        {
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(loginModel.UserName!, loginModel.Password!, loginModel.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            await OnLogin.InvokeAsync();
        }
        else
        {
            messageStore?.Add(() => loginModel, FailureMessage);
            editContext.NotifyValidationStateChanged();
        }
    }

    public class LoginModel
    {
        [Required]
        [Display(Name = "UserName")]
        public string? UserName { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string? Password { get; set; }

        public bool RememberMe { get; set; }
    }
}
