@page "/"
@using Kamigo.Data.Models;
@using Kamigo.PokeShow.Data;
@using Microsoft.AspNetCore.Identity;
@inject PlayerGamesService PlayerGamesService;

<PageTitle>Mes jeux</PageTitle>

<h1>Liste de vos jeux</h1>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <p>Vous devez être connecté pour accéder à cette page.</p>
            <a href="Identity/Account/Login">Se connecter</a>
        </NotAuthorized>
        <Authorized>

            <select class="custom-select" multiple @onchange="@OnSelect">
                @foreach (var game in FullPokemonGamesList)
                {
                    <option value="@game.Id">@game.Name</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="@AddGames">Ajouter</button>

            @if (PlayerGames is null || !PlayerGames.Any())
            {
                <p>Oops ! Vous n'avez pas encore de jeux.</p>
                
            }else
            {
                var gamesPerGeneration = PlayerGames.GroupBy(p => p.Generation);
                foreach (var gameGeneration in gamesPerGeneration)
                {
                    <div class="container">
                        <div class="row justify-content-around">
                            @foreach (var game in gameGeneration)
                            {
                                <div class="card" style="width: 18rem;">
                                    <img class="card-img-top" src=@game.ImageUrl alt="Couverture du jeu @game.Name">
                                    <div class="card-body">
                                        <h5 class="card-title">@game.Name</h5>
                                        <p class="card-text">@game.Description</p>
                                    </div>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">Génération : @gameGeneration.Key</li>
                                        <li class="list-group-item">Région : @game.Region</li>
                                        <li class="list-group-item">Sortie : @game.ReleaseDate.ToLocalTime()</li>
                                    </ul>
                                    <a href="/pokedex/@game.Id" class="btn btn-primary">Mon Pokédex</a>
                                    <a class="btn btn-danger" @onclick="@(() => DeleteGameFromPlayer(game.Id))">Supprimer</a>
                                </div>
                            }
                        </div>
                    </div>
                    <p></p>
                }
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code{

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    private UserManager<IdentityUser> UserManager { get; set; }

    private List<PokemonGame> PlayerGames { get; set; }

    private List<PokemonGame> FullPokemonGamesList { get; set; } = new List<PokemonGame>();

    private string CurrentUserId { get; set; }

    private int[] SelectedGameIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            CurrentUserId = currentUser.Id;
            var playerGames = await PlayerGamesService.GetPlayerGamesAsync(CurrentUserId);
            PlayerGames = playerGames;
            FullPokemonGamesList = PokemonGamesList.Games.Where(g => !PlayerGames.Any(p => p.Id == g.Id));
        }
    }

    private void OnSelect(ChangeEventArgs e)
    {
        var selectedIdsAsStrings = (string[])e.Value;
        SelectedGameIds = selectedIdsAsStrings.Select(int.Parse).ToArray();
    }

    private async Task AddGames()
    {
        if (SelectedGameIds.Any())
        {
            PlayerGames = await PlayerGamesService.AddGamesToPlayerAsync(CurrentUserId, SelectedGameIds);
            FullPokemonGamesList = PokemonGamesList.Games.Where(g => !PlayerGames.Any(p => p.Id == g.Id));
        }
    }

    private async Task DeleteGameFromPlayer(int gameId)
    {
        PlayerGames = await PlayerGamesService.DeleteGameFromPlayerAsync(CurrentUserId, gameId);
        FullPokemonGamesList = PokemonGamesList.Games.Where(g => !PlayerGames.Any(p => p.Id == g.Id));
    }
}