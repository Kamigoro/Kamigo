@page "/"
@using BlazorIdentity;
@using Kamigo.Data.Models;
@using Kamigo.PokeShow.Data;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Localization;
@inject IStringLocalizer<App> Localizer;
@inject PlayerGamesService PlayerGamesService;

<h1>@Localizer["your-game-list_label"]</h1>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <p>@Localizer["have-to-be-connected_warning"]</p>
            <a href="Account/Login">@Localizer["login_button"]</a>
        </NotAuthorized>

        <Authorized>
            @if (GamesPlayerOwns is null || !GamesPlayerOwns.Any())
            {
                <p>@Localizer["no-game-in-collection_warning"]</p>
                
            }else
            {
                <div class="container-fluid">
                    <div class="row justify-content-center">
                        @foreach (var game in GamesPlayerOwns.OrderBy(g => g.Id))
                        {
                            <PokemonGameCard Game="@game" PlayerId="@CurrentUserId" />
                        }
                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code{

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    private IBlazorUserManager<AppUser> UserManager { get; set; }

    private List<PokemonGame> GamesPlayerOwns { get; set; }

    private string CurrentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            CurrentUserId = currentUser.Id;
            var playerGames = await PlayerGamesService.GetPlayerGamesAsync(CurrentUserId);
            GamesPlayerOwns = playerGames;
        }
    }
}